use crate::{mock::*, BlackList, Error, Event};
use frame_support::{assert_noop, assert_ok, traits::fungible::Inspect};
use sp_core::U256;

#[test]
fn test_setup_verification() {
	new_test_ext().execute_with(|| {
		let vk = prepare_vk_json("groth16", "bls12381", Some("3701847203724321478317961353917758270528478504282408535117312363800157867784070247396381164448597370877483548917602".to_owned()));
		assert_ok!(MixerModule::setup_verification(
			RuntimeOrigin::signed(1),
			vk.as_bytes().into()
		));
		// let events = zk_events();

		// assert_eq!(events.len(), 1);
		// assert_eq!(events[0], Event::<Test>::VerificationSetupCompleted);
	});
}

#[test]
fn test_deposit() {
	new_test_ext().execute_with(|| {
		let before = Balances::balance(&1);
		assert_ok!(MixerModule::deposit(RuntimeOrigin::signed(1), vec![1]));
		let after = Balances::balance(&1);

		assert_eq!(before, after + 1_000);
	});
}

#[test]
fn test_withdraw() {
	new_test_ext().execute_with(|| {
        let vk = prepare_vk_json("groth16", "bls12381", Some("3701847203724321478317961353917758270528478504282408535117312363800157867784070247396381164448597370877483548917602".to_owned()));
		assert_ok!(MixerModule::setup_verification(
			RuntimeOrigin::signed(1),
			vk.as_bytes().into()
		));

		assert_ok!(MixerModule::deposit(RuntimeOrigin::signed(1), vec![1]));

		assert_noop!(
			MixerModule::withdraw(RuntimeOrigin::signed(1), vec![1], vec![1], vec![1], 2),
			Error::<Test>::CanNotFindMerkelRoot
		);

		let root = U256::from_dec_str(
			"11918823777688916996440235409179584458198237132535057418448191606750426488941",
		)
		.unwrap();

		let mut root_bytes = [0u8; 32];
		root.to_big_endian(&mut root_bytes);

        let incorrect_proof = prepare_incorrect_proof_json("groth16", "bls12381", None);

		assert_noop!(MixerModule::withdraw(
                RuntimeOrigin::signed(1),
                incorrect_proof.as_bytes().into(),
                root_bytes.to_vec(),
                vec![1u8],
                2
            ),
            Error::<Test>::ProofCreationError
        );

        let proof = prepare_proof_json("groth16", "bls12381", Some("2322951162634154032295553590609309989856107176303155507798857747930082472925732745332519844616976906997786276886751".to_owned()));

        let before = Balances::balance(&2);
		assert_ok!(MixerModule::withdraw(
			RuntimeOrigin::signed(1),
			proof.as_bytes().into(),
			root_bytes.to_vec(),
			vec![1u8],
			2
		),);
        let after = Balances::balance(&2);
        assert_eq!(before + 1_000, after );


        assert_noop!(MixerModule::withdraw(
			RuntimeOrigin::signed(1),
			proof.as_bytes().into(),
			root_bytes.to_vec(),
			vec![1u8],
			2
		),
        Error::<Test>::NoteHasBeanSpent
    );


	});
}

#[test]
fn test_blacklist() {
	new_test_ext().execute_with(|| {
        assert_ok!(MixerModule::add_black_list(RuntimeOrigin::signed(1), 1));

        let vk = prepare_vk_json("groth16", "bls12381", Some("3701847203724321478317961353917758270528478504282408535117312363800157867784070247396381164448597370877483548917602".to_owned()));
		assert_ok!(MixerModule::setup_verification(
			RuntimeOrigin::signed(1),
			vk.as_bytes().into()
		));

		assert_noop!(
            MixerModule::deposit(RuntimeOrigin::signed(1),vec![1]),
            Error::<Test>::BlacklistRejected
        );

        assert_noop!(
			MixerModule::withdraw(RuntimeOrigin::signed(1), vec![1], vec![1], vec![1], 2),
			Error::<Test>::BlacklistRejected
		);

	});
}

fn prepare_correct_public_inputs_json() -> String {
	r#"[
        "12154017155188732043720388494527814426846884333686418648942396484836291069935",
        "47383248954783409320757252323368067485491150229432134318939482346666131919279"
]"#
	.to_owned()
}

fn prepare_incorrect_public_inputs_json() -> String {
	r#"[
        "3"
]"#
	.to_owned()
}

fn prepare_empty_public_inputs_json() -> String {
	r#"[
]"#
	.to_owned()
}

//alpha_x is
// 3701847203724321478317961353917758270528478504282408535117312363800157867784070247396381164448597370877483548917602
fn prepare_vk_json(protocol: &str, curve: &str, alpha_x: Option<String>) -> String {
	let alpha_x = alpha_x.unwrap_or_else(|| "2417420058161902631695569321985275527817337553240735969068630412919230058600548397578577183742111992841943587142680".to_owned());
	let vk_template = r#"{
"protocol": "<protocol>",
"curve": "<curve>",
"nPublic": 1,
"vk_alpha_1": [
   "<alpha_x>",
   "3621908261557178009511869615612240051195059351664177922247752368305359958201344041531527847938103737637176447635601",
  "1"
 ],
 "vk_beta_2": [
  [
   "3931282757002674480106265542859167328045181662119325634567638550198398371629503320612235519919660355200732612104230",
   "360316050652926106575174031906802935328244020947113312865114819292894648449415870901036184238524303405125975983212"
  ],
  [
   "1280282746982043834640226578895451329980874362138260694489177479798518066040923316035466089684829724920799303495415",
   "2835571917774595585744022613548458970276225839018665069860873438195197025851790852281684526374729482930678033733112"
  ],
  [
   "1",
   "0"
  ]
 ],
 "vk_gamma_2": [
  [
   "352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160",
   "3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758"
  ],
  [
   "1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905",
   "927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582"
  ],
  [
   "1",
   "0"
  ]
 ],
 "vk_delta_2": [
  [
   "700675175947674835068604595446983741018533941597930700597612036201148758047379007717610285511513822647227113813615",
   "1947027813029364799739846235302730395300359964088246983578076051815987946919940048069012384792848446994947137384045"
  ],
  [
   "3569330459757361344064190677089725545695361908182806939468423766748080822523102982461143821665854734743822501387050",
   "1196349618545956200751379846303158216996715392146125320297323208188231250054006539526093823070041389557911514461017"
  ],
  [
   "1",
   "0"
  ]
 ],
 "vk_alphabeta_12": [
  [
   [
    "1434884029808652964196390603273173958819921483827796755178306368647498143672247018071893742923624900300605963908304",
    "1287003276601672274886753548952217003378247165300452728795851520774895900359269341112848129928635424721431324004632"
   ],
   [
    "3069998669529457330595846240939896001605102850390958652250992887048724551240426117391159360855670634708942191790562",
    "1161396953470206473501686326092002277991661404099609842523762144488780203738535768150528364811333229512428616102987"
   ],
   [
    "3744378449938078314787538980846234335707616574530142110451209006553595008211347616431917255062476767300799005915096",
    "479221827828660680611361328260061178937843701399390616101397838155500863165507531060907083804208510308050519680929"
   ]
  ],
  [
   [
    "557878334252053156648718232335886010744557130423813778575542093742811435832360518227934394745928256660406425236711",
    "2567357542583650206933283064557826673668524319771850302240931770189263027001807094413211093106803637412877112136748"
   ],
   [
    "558611978196823400527925704913787957005806926185129001185755634280145623881354150683846312857203652736576951028421",
    "2447502967328897835303342185670455971265434205865281817802784992170304188665280266533582153367827473679037320759124"
   ],
   [
    "3748940809863397201223197337794218850824022547695624624085270695506820684121095435600051995899134541423850636234711",
    "2426282486802002792673630186349928542303337226107069071446226768410048260993102469383051855562940495541680680214604"
   ]
  ]
 ],
 "IC": [
  [
   "437598137785311322251495724823955999328365773946504154572271218646929684954774077877343752093312358238754801367074",
   "1728620798256188415592146248030764528978773418788509017543779085040485028675985029742511692255096878845189269716384",
   "1"
  ],
  [
   "2033324943535686710200713478860560158794614698189153333199592801789883180853922903735655485101002329087410256880484",
   "1410035368796850179396786553078253256368145944256434715406959307962455036725004693026265131117447308293875907631876",
   "1"
  ],
  [
   "3228132431630744978530328697074528449806773689967001954619643869132424047543831016725595416457812128689617085326898",
   "313337616358539565147492627241741926833644153453103671428385309374108187231317469859543710737317515126623264505957",
   "1"
  ]
 ]
}"#;
	vk_template
		.replace("<protocol>", protocol)
		.replace("<curve>", curve)
		.replace("<alpha_x>", &alpha_x)
}

//pi_a_x is 2322951162634154032295553590609309989856107176303155507798857747930082472925732745332519844616976906997786276886751
fn prepare_proof_json(protocol: &str, curve: &str, pi_a_x: Option<String>) -> String {
	let pi_a_x = pi_a_x.unwrap_or_else(|| "1547868284561670884744470829066291861753711715427536197016979117727657722537367306855408779073400007356480755992286".to_owned());
	let proof_template = r#"{
"pi_a": [
"<pi_a_x>",
    "2928190285687118456628237490794665579453180400888749391929466989435165647115585828297072258065296795029705291422264",
  "1"
 ],
 "pi_b": [
  [
   "1544760086384659722491129944413761133791624948103687884212411089143858975622856940458923129956549037030696758467649",
   "2464775189940920238959991888711294617710220437968413348610396451115323002165937973643445926899349404418574329460530"
  ],
  [
   "3298763698389029215031200968019705888307726502718892947097194556364826276603985042582992623562599586739493850907434",
   "2484185654597531706472773683412570119063675254953464390794474438981035635108861904757019365474913600425823454389195"
  ],
  [
   "1",
   "0"
  ]
 ],
 "pi_c": [
  "3327459656536994775566432277999577617658464546941643592998127983803641389162440694800645493012291115986979472221453",
  "375275461267575649570959031559608367700810891085934218713539805936334713365508835650335023558572824609826972817941",
  "1"
 ],
"protocol": "<protocol>",
"curve": "<curve>"
}"#;

	proof_template
		.replace("<protocol>", protocol)
		.replace("<curve>", curve)
		.replace("<pi_a_x>", &pi_a_x)
}

fn prepare_incorrect_proof_json(protocol: &str, curve: &str, pi_a_x: Option<String>) -> String {
	let pi_a_x = pi_a_x.unwrap_or_else(|| "1547868284561670884744470829066291861753711715427536197016979117727657722537367306855408779073400007356480755992286".to_owned());
	let proof_template = r#"{
"pi_a": [
"<pi_a_x>",
    "2928190285687118456628237490794665579453180400888749391929466989435165647115585828297072258065296795029705291422264",
  "1"
 ],
 "pi_b": [
  [
   "1544760086384659722491129944413761133791624948103687884212411089143858975622856940458923129956549037030696758467649",
   "2464775189940920238959991888711294617710220437968413348610396451115323002165937973643445926899349404418574329460530"
  ],
  [
   "3298763698389029215031200968019705888307726502718892947097194556364826276603985042582992623562599586739493850907434",
   "2484185654597531706472773683412570119063675254953464390794474438981035635108861904757019365474913600425823454389195"
  ],
  [
   "1",
   "0"
  ]
 ],
 "pi_c": [
  "3327459656536994775566432277999577617658464546941643592998127983803641389162440694800645493012291115986979472221453",
  "375275461267575649570959031559608367700810891085934218713539805936334713365508835650335023558572824609826972817941",
  "1"
 ],
"protocol": "<protocol>",
"curve": "<curve>"
}"#;

	proof_template
		.replace("<protocol>", protocol)
		.replace("<curve>", curve)
		.replace("<pi_a_x>", &pi_a_x)
}
